cbuffer viewProjection
{
	row_major float4x4 VP;
}

cbuffer World
{
	row_major float4x4 W;  // World matrix
}


cbuffer animatedMeshBuffer
{
	row_major float4x4 bones[256];
}

struct VS_INPUT
{
	uint Type: TYPE; //0 for static, 1 for animated
	float4 Pos : POS;
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 TexCoords : TEXCOORD;
	uint4 BoneIDs : BONEIDS;
	float4 BoneWeights : BONEWEIGHTS;
};

struct PS_INPUT
{
	float4 Pos : SV_POSITION; 
	float3 Normal : NORMAL;
	float3 Tangent : TANGENT;
	float2 TexCoords : TEXCOORD;
}; 

PS_INPUT VS(VS_INPUT input)
{
	PS_INPUT output;
	if(input.Type == 0){
		// Static vertex processing
		output.Pos = mul(W, input.Pos);
		output.Pos = mul(VP, output.Pos);
		output.Normal = mul((float3x3)W, input.Normal);
		output.Tangent = mul( (float3x3)W, input.Tangent);
		output.TexCoords = input.TexCoords;
		return output;
	}
	else{
		row_major float4x4 transform = bones[input.BoneIDs[0]] * input.BoneWeights[0];
		transform += bones[input.BoneIDs[1]] * input.BoneWeights[1];
		transform += bones[input.BoneIDs[2]] * input.BoneWeights[2];
		transform += bones[input.BoneIDs[3]] * input.BoneWeights[3];
		output.Pos = mul(transform, input.Pos);
		output.Pos = mul(W, output.Pos);
		output.Pos = mul(VP, output.Pos);

		output.Normal = mul((float3x3)transform, input.Normal);
		output.Normal = mul((float3x3)W, output.Normal);
		output.Normal = normalize(output.Normal);
		output.Tangent = mul((float3x3)transform, input.Tangent);
		output.Tangent = mul((float3x3)W, output.Tangent);
		output.Tangent = normalize(output.Tangent);
		output.TexCoords = input.TexCoords;
		return output;
	}
	
}
